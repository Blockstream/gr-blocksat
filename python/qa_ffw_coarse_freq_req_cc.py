#!/usr/bin/env python2
# -*- coding: utf-8 -*-
#
# Copyright 2019 Blockstream Corp.
#
# This is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
#

from gnuradio import gr, gr_unittest
from gnuradio import blocks
import blocksat_swig as blocksat

class qa_ffw_coarse_freq_req_cc (gr_unittest.TestCase):

    def setUp (self):
        self.tb = gr.top_block ()

    def tearDown (self):
        self.tb = None

    def test_001_t (self):
        # Parameters
        N_fft     = 128
        alpha     = 1.0
        M         = 2
        sleep_per = 1
        debug     = True
        frame_len = 32
        sps       = 4
        samp_rate = 1e6

        # Constants
        Fe         = 0.109375 # just informative (see the .m script)


        rx_samples = (+0.055279 -0.542822j, +0.194822 -0.216860j,
                      -0.037861 +0.017776j, -0.316910 -0.210946j,
                      -0.147564 -0.599577j, +0.219393 -0.399150j,
                      +0.159466 -0.057301j, -0.261915 -0.118706j,
                      -0.259729 -0.471181j, +0.075897 -0.723187j,
                      +0.509261 -0.470799j, +0.589091 -0.051319j,
                      +0.377445 +0.302747j, +0.011990 +0.325015j,
                      -0.165858 +0.358087j, -0.501931 +0.234342j,
                      -0.523752 -0.159916j, -0.362936 -0.472017j,
                      +0.030877 -0.535428j, +0.277732 -0.320525j,
                      +0.463869 +0.025515j, +0.347096 +0.201682j,
                      +0.145219 +0.484121j, -0.220541 +0.566358j,
                      -0.418062 +0.274810j, -0.462512 -0.129875j,
                      -0.233627 -0.308792j, -0.018476 -0.416211j,
                      +0.222795 -0.318519j, +0.532481 -0.102172j,
                      +0.674718 +0.334516j, +0.309585 +0.671016j,
                      -0.151882 +0.567272j, -0.193984 +0.103460j,
                      +0.237835 +0.051304j, +0.348609 +0.414413j,
                      +0.025997 +0.584660j, -0.234874 +0.253783j,
                      +0.154161 +0.017782j, +0.501553 +0.172069j,
                      +0.284949 +0.559476j, -0.127509 +0.413385j,
                      +0.028726 -0.043178j, +0.522777 +0.050344j,
                      +0.489671 +0.428266j, +0.024996 +0.459328j,
                      +0.007014 +0.001361j, +0.421851 -0.148994j,
                      +0.656440 +0.205895j, +0.234452 +0.513797j,
                      -0.027316 -0.031986j, +0.379899 -0.254191j,
                      +0.733320 +0.004078j, +0.307058 +0.383790j,
                      +0.000987 +0.056890j, +0.217753 -0.404581j,
                      +0.648438 -0.216033j, +0.491859 +0.186198j,
                      -0.021614 +0.065783j, +0.008997 -0.391946j,
                      +0.459434 -0.369736j, +0.438117 -0.068093j,
                      +0.025348 -0.004578j, -0.156116 -0.383669j,
                      +0.255134 -0.590235j, +0.490659 -0.253494j,
                      +0.134468 +0.086461j, -0.234803 -0.311726j,
                      +0.046239 -0.630205j, +0.430993 -0.382316j,
                      +0.239591 -0.054481j, -0.146234 -0.114999j,
                      -0.175630 -0.638870j, +0.253100 -0.764722j,
                      +0.688343 -0.374937j, +0.566831 +0.185527j,
                      +0.280413 +0.337561j, -0.040150 +0.195919j,
                      +0.041499 -0.010508j, +0.259458 -0.071696j,
                      +0.349241 +0.153448j, +0.208958 +0.540788j,
                      -0.256978 +0.717904j, -0.637595 +0.419997j,
                      -0.570172 -0.109854j, -0.146919 -0.159365j,
                      +0.016018 +0.206504j, -0.214594 +0.405800j,
                      -0.534828 +0.161973j, -0.352707 -0.226374j,
                      -0.039359 -0.054279j, -0.082312 +0.333726j,
                      -0.486140 +0.325302j, -0.648258 -0.010214j,
                      -0.416811 -0.348419j, -0.103463 -0.473952j,
                      +0.226907 -0.369798j, +0.407052 -0.196219j,
                      +0.539172 +0.219246j, +0.262647 +0.537675j,
                      -0.125963 +0.551301j, -0.305833 +0.204191j,
                      +0.060343 +0.028399j, +0.275846 +0.191555j,
                      +0.097114 +0.568543j, -0.244280 +0.531388j,
                      -0.537765 +0.216146j, -0.473278 -0.206751j,
                      -0.167950 -0.360593j, +0.120703 -0.445075j,
                      +0.466689 -0.367297j, +0.618388 -0.034015j,
                      +0.482335 +0.394383j, -0.012259 +0.340840j,
                      +0.099515 -0.070949j, +0.414148 -0.205956j,
                      +0.616788 +0.199325j, +0.282672 +0.370601j,
                      -0.004732 +0.170102j, +0.135933 -0.140555j,
                      +0.554781 -0.068741j, +0.656680 +0.329167j,
                      +0.214796 +0.708056j, -0.133545 +0.621346j,
                      -0.378616 +0.140067j, -0.258742 -0.038911j,
                      -0.076899 -0.174454j, -0.015877 -0.063888j)

        expected_res = (+0.055279 -0.542822j, +0.013025 -0.291228j,
                        +0.010048 +0.040601j, -0.036647 +0.378929j,
                        -0.093117 +0.610407j, -0.094078 +0.445649j,
                        -0.040951 +0.164426j, +0.092462 -0.272289j,
                        +0.149519 -0.516831j, +0.146417 -0.712265j,
                        +0.161872 -0.674385j, +0.121895 -0.578622j,
                        +0.135260 -0.464570j, +0.142637 -0.292289j,
                        +0.092812 -0.383564j, +0.137273 -0.536663j,
                        +0.159916 -0.523752j, +0.134630 -0.579998j,
                        +0.134740 -0.519116j, +0.093844 -0.413600j,
                        +0.201088 -0.418795j, +0.092241 -0.390696j,
                        +0.148218 -0.483211j, +0.163966 -0.585248j,
                        +0.101295 -0.489934j, +0.174584 -0.447555j,
                        +0.126955 -0.365809j, +0.103139 -0.403652j,
                        +0.083944 -0.379533j, +0.160902 -0.517770j,
                        +0.196457 -0.727014j, +0.186375 -0.715101j,
                        +0.151882 -0.567272j, +0.084317 -0.203038j,
                        -0.096717 +0.223256j, -0.201147 +0.502799j,
                        -0.199722 +0.550104j, -0.151091 +0.311036j,
                        +0.100432 -0.118301j, +0.122080 -0.516004j,
                        +0.194120 -0.597099j, +0.167413 -0.398896j,
                        +0.000104 +0.051860j, -0.199931 +0.485653j,
                        -0.208278 +0.616287j, -0.194481 +0.416874j,
                        +0.007144 -0.000034j, +0.152445 -0.420616j,
                        +0.205895 -0.656440j, +0.248435 -0.507183j,
                        +0.020551 +0.036700j, -0.215217 +0.403260j,
                        -0.284397 +0.675939j, -0.278130 +0.405244j,
                        -0.030786 +0.047850j, +0.177048 -0.423976j,
                        +0.305756 -0.611273j, +0.233512 -0.471240j,
                        +0.066704 -0.018575j, -0.122386 +0.372457j,
                        -0.282970 +0.517409j, -0.146475 +0.418483j,
                        +0.009435 +0.023968j, +0.122717 -0.395619j,
                        +0.255134 -0.590235j, +0.218470 -0.507224j,
                        +0.111033 -0.115017j, -0.164233 +0.354024j,
                        -0.283888 +0.564538j, -0.301454 +0.490964j,
                        -0.087810 +0.229481j, +0.100112 -0.156802j,
                        +0.327560 -0.575939j, +0.326837 -0.736232j,
                        +0.364033 -0.694172j, +0.342080 -0.488567j,
                        +0.204557 -0.388247j, +0.127765 -0.153859j,
                        -0.038651 +0.018402j, -0.109176 +0.246047j,
                        -0.153448 +0.349241j, -0.285473 +0.504599j,
                        -0.392096 +0.653976j, -0.364323 +0.670964j,
                        -0.319688 +0.484731j, -0.109854 +0.186854j,
                        +0.101409 -0.180601j, +0.173785 -0.424880j,
                        +0.263649 -0.492713j, +0.259855 -0.328820j,
                        +0.023264 -0.062882j, -0.175643 +0.295462j,
                        -0.324647 +0.486578j, -0.314595 +0.566897j,
                        -0.260408 +0.476775j, -0.220694 +0.432006j,
                        -0.226907 +0.369798j, -0.190175 +0.409910j,
                        -0.320220 +0.486039j, -0.350376 +0.485092j,
                        -0.327348 +0.461132j, -0.233390 +0.284178j,
                        +0.057137 -0.034396j, +0.163595 -0.293294j,
                        +0.333350 -0.470691j, +0.295189 -0.504885j,
                        +0.327051 -0.478485j, +0.335233 -0.392882j,
                        +0.268873 -0.293158j, +0.316258 -0.335622j,
                        +0.386066 -0.451286j, +0.366007 -0.499599j,
                        +0.394383 -0.482335j, +0.271250 -0.206750j,
                        -0.111444 +0.050171j, -0.268159 +0.376865j,
                        -0.420187 +0.493560j, -0.272588 +0.378080j,
                        -0.098438 +0.138806j, +0.121502 -0.153202j,
                        +0.343682 -0.440897j, +0.391948 -0.621254j,
                        +0.469393 -0.571972j, +0.308162 -0.555825j,
                        +0.296194 -0.274294j, +0.156286 -0.209848j,
                        +0.156100 -0.109456j, +0.028257 -0.059458j)

        # set up fg
        self.tb.run ()

        # Flowgraph
        samp_src = blocks.vector_source_c(rx_samples)
        freq_rec = blocksat.ffw_coarse_freq_req_cc(N_fft, alpha, M, sleep_per,
                                                   debug, frame_len, sps)
        samp_snk = blocks.vector_sink_c()
        self.tb.connect(samp_src, (freq_rec, 0))
        self.tb.connect(freq_rec, samp_snk)
        self.tb.run()
        samp_out = samp_snk.data()

        # Results
        self.assertFloatTuplesAlmostEqual(expected_res, samp_out, 3)


if __name__ == '__main__':
    gr_unittest.run(qa_ffw_coarse_freq_req_cc, "qa_ffw_coarse_freq_req_cc.xml")
