<?xml version="1.0"?>
<block>
  <name>NCO</name>
  <key>mods_nco_cc</key>
  <category>[Blockstream]/Synchronizers</category>
  <import>import mods</import>
  <make>mods.nco_cc($samp_rate, $freq, $n_steps)</make>
  <callback>set_freq($freq)</callback>
  <param>
    <name>Sample Rate</name>
    <key>samp_rate</key>
    <type>float</type>
  </param>
  <param>
    <name>Frequency</name>
    <key>freq</key>
    <type>float</type>
  </param>
  <param>
    <name>Smoothing Steps</name>
    <key>n_steps</key>
    <type>int</type>
  </param>
  <sink>
    <name>in</name>
    <type>complex</type>
  </sink>
  <source>
    <name>out</name>
    <type>complex</type>
  </source>
  <doc>Mixing by Numerically Controlled Oscillator

This block receives a complex (IQ) input and multiplies this signal by the \
complex sinusoid generated by a numerically controlled oscillator (NCO). It \
can be used for example for frequency offset correction or digital down/up \
conversion.

Parameters:
freq -> The frequency shift that is supposed to be applied to the input signal.

n_steps -> Number of steps used to adjust the phase increment when it is \
changed asynchronously.

A fixed phase increment is applied internally in the NCO, based on the given \
frequency. This increment is set as "2*pi*F", where F is the target normalized \
(digital) frequency for the NCO, namely "freq/samp_rate"".

Also, the above number of steps is used to avoid abrupt frequency changes in \
the output. Instead of changing directly from the previous frequency to the \
current, the change is executed in the course of "n_steps". The only exception \
is when the NCO's frequency is set to 0. When this occurs, the NCO transitions \
to 0 immediately.

  </doc>
</block>
